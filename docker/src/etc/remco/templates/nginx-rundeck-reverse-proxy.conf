
# Rundeck Reverse Proxy Configuration server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	server_name {{ getv("/sso/protected/domain", "") }};

# Claims will bloat the buffer so we need to scale these buffers.
	proxy_buffer_size 16k;
	proxy_buffers 4 16k;
	proxy_busy_buffers_size 16k;

{% if exists("/shared/files/path") %}
	access_log {{ getv("/shared/files/path") }}/logs/nginx/access.log;
	error_log {{ getv("/shared/files/path") }}/logs/nginx/error.log;
	
{% endif %}
	root /usr/share/nginx/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm;

	location /sso {
		proxy_pass http://127.0.0.1:9090; # must not! have a slash at the end
		#proxy_set_header Host $http_host;
		proxy_set_header Host {{ getv("/sso/protected/domain", "") }};
		proxy_set_header X-Forwarded-Proto {{ getv("/sso/protected/domain/scheme", "https") }};
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		proxy_pass_request_body off;
		proxy_set_header Content-Length "";

		# these return values are used by the @error401 call
		auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
		auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
		auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
	}

	# if validate returns `401 not authorized` then forward the request to the error401block
	error_page 401 = @error401;


	location @error401 {
		# redirect to Vouch Proxy for login
		return 302 {{ getv("/sso/protected/domain/scheme", "https") }}://{{ getv("/sso/protected/domain", "") }}/sso/login?url={{ getv("/sso/protected/domain/scheme", "https") }}://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
	}

{% if exists("/shared/files/path") %}
	#Allow logs to be browsed and downloaded by anyone who has SSO privileges.
	location /sharedlogs {
		alias {{ getv("/shared/files/path") }}/logs;
		index index.htm index.html;
		autoindex on;

		auth_request /sso/validate;

		auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
		auth_request_set $auth_resp_x_vouch_idp_claims_group $upstream_http_x_vouch_idp_claims_group;
		auth_request_set $auth_resp_x_vouch_idp_claims_Email $upstream_http_x_vouch_idp_claims_Email;
	}

	#Allow backups of logs to be browsed and downloaded by anyone who has SSO privileges.
	location /sharedbackup {
		alias {{ getv("/shared/files/path") }}/backup;
		index index.htm index.html;
		autoindex on;

		auth_request /sso/validate;

		auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
		auth_request_set $auth_resp_x_vouch_idp_claims_group $upstream_http_x_vouch_idp_claims_group;
		auth_request_set $auth_resp_x_vouch_idp_claims_Email $upstream_http_x_vouch_idp_claims_Email;
	}

{% endif %}
	#API/Webhooks to not use SSO
	location ~ ^/api/(.*?)/webhook/(.*?)$ {
		proxy_pass http://127.0.0.1:{{ getv("/rundeck/server/port", "4440") }};
		proxy_set_header Host {{ getv("/sso/protected/domain", "") }};
		proxy_set_header X-Forwarded-Proto {{ getv("/sso/protected/domain/scheme", "https") }};
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}

	#Custom logout so we can make sure the JSESSION gets nuked... caused some lingering ghost session issues.
	location /rundecklogout {
		rewrite ^/rundecklogout(.*)$ {{ getv("/sso/protected/domain/scheme", "https") }}://{{ getv("/sso/protected/domain", "") }}/sso/logout?url={{ getv("/sso/logout/url", "") }} redirect;
		add_header Set-Cookie "JSESSIONID=; Path=/; HttpOnly"; 
		proxy_set_header Host {{ getv("/sso/protected/domain", "") }};
		proxy_set_header X-Forwarded-Proto {{ getv("/sso/protected/domain/scheme", "https") }};
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}

	# proxy pass authorized requests to Rundeck
	location / {
		auth_request /sso/validate;
		proxy_pass http://127.0.0.1:{{ getv("/rundeck/server/port", "4440") }};
		auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
		auth_request_set $auth_resp_x_vouch_idp_claims_group $upstream_http_x_vouch_idp_claims_group;
		auth_request_set $auth_resp_x_vouch_idp_claims_Email $upstream_http_x_vouch_idp_claims_Email;

		proxy_set_header {{ getv("/rundeck/preauth/roles/header", "X-Forwarded-Roles") }} $auth_resp_x_vouch_idp_claims_group;
		proxy_set_header {{ getv("/rundeck/preauth/username/header", "X-Forwarded-Uuid") }} $auth_resp_x_vouch_user;
		proxy_set_header {{ getv("/rundeck/preauth/usersync/email", "X-Forwarded-User-Email") }} $auth_resp_x_vouch_idp_claims_Email;

		proxy_set_header Host {{ getv("/sso/protected/domain", "") }};
		proxy_set_header X-Forwarded-Proto {{ getv("/sso/protected/domain/scheme", "https") }};
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		expires -1;
	}
}
